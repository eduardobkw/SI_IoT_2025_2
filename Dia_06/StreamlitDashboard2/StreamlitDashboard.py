import streamlit as st
import pandas as pd
import requests
from io import BytesIO

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Dashboard de Sensores | Google Sheets",
    page_icon="üìä",
    layout="wide"
)

# --- T√≠tulo do Webapp ---
st.title("üìà Dashboard de Monitoramento de Sensores")
st.markdown("Este webapp exibe dados de sensores coletados em tempo real a partir de uma planilha do Google Sheets.")

# --- Carregamento de Dados com Cache ---
URL_CSV = "https://docs.google.com/spreadsheets/d/e/2PACX-1vR5w6OFL_o3ZKj7Awz46cIvmKZsSpXgW35NeWWbjgbSDSC8FGo125-hXs4-hOmihvC-IFXuLKcZ2C6o/pub?gid=859827063&single=true&output=csv"

@st.cache_data(ttl=180 ) # Cache expira a cada 3 minutos
def carregar_dados(url):
    """
    Busca os dados da URL do Google Sheets e os carrega em um DataFrame Pandas.
    """
    try:
        resposta = requests.get(url)
        resposta.raise_for_status()
        dados_bytes = resposta.content
        df = pd.read_csv(BytesIO(dados_bytes), index_col=0)
        
        # --- Limpeza e Prepara√ß√£o dos Dados ---
        df.index = pd.to_datetime(df.index)
        
        # Garante que as colunas de sensores s√£o num√©ricas
        df['Temperatura'] = pd.to_numeric(df['Temperatura'], errors='coerce')
        df['Umidade'] = pd.to_numeric(df['Umidade'], errors='coerce')
        
        # *** CORRE√á√ÉO ADICIONADA AQUI ***
        # Garante que as colunas de estado tamb√©m sejam num√©ricas (0 ou 1)
        df['Botao'] = pd.to_numeric(df['Botao'], errors='coerce')
        df['Alarme'] = pd.to_numeric(df['Alarme'], errors='coerce')
        
        # Remove linhas onde a convers√£o para n√∫mero falhou em colunas essenciais
        df.dropna(subset=['Temperatura', 'Umidade', 'Botao', 'Alarme'], inplace=True)
        
        return df
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar ou processar os dados: {e}")
        return pd.DataFrame()

# Carrega os dados
df = carregar_dados(URL_CSV)

# Bot√£o para recarregar
if st.button('Recarregar Dados Agora'):
    st.cache_data.clear()
    st.rerun()

# --- Exibi√ß√£o dos Dados ---
if not df.empty:
    st.header("üå°Ô∏è Gr√°fico de Temperatura e Umidade")
    st.write("Visualiza√ß√£o da varia√ß√£o dos sensores ao longo do tempo.")
    st.line_chart(df[['Temperatura', 'Umidade']])

    # --- Exibi√ß√£o dos Estados do Bot√£o e Alarme ---
    st.header("üö¶ Status Atuais (√öltima Leitura)")
    
    ultimo_status = df.iloc[-1]
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Bot√£o")
        # *** CORRE√á√ÉO PRINCIPAL AQUI ***
        # Compara com o valor num√©rico 1 em vez do texto "Ligado"
        if ultimo_status['Botao'] == 1:
            st.success("Ligado") # Verde
        else:
            st.error("Desligado") # Vermelho

    with col2:
        st.subheader("Alarme")
        # *** CORRE√á√ÉO PRINCIPAL AQUI ***
        # Compara com o valor num√©rico 1 em vez do texto "Ligado"
        if ultimo_status['Alarme'] == 1:
            st.success("Ligado") # Verde
        else:
            st.error("Desligado") # Vermelho

    with st.expander("Ver Tabela de Dados Completa"):
        st.dataframe(df)
else:
    st.warning("N√£o foi poss√≠vel carregar os dados. Verifique a URL e sua conex√£o com a internet.")

